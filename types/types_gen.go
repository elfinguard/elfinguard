package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"C"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *DecryptTaskToken) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "e":
			z.ExpireTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ExpireTime")
				return
			}
		case "f":
			err = dc.ReadExactBytes((z.FileId)[:])
			if err != nil {
				err = msgp.WrapError(err, "FileId")
				return
			}
		case "r":
			err = dc.ReadExactBytes((z.RecryptorSalt)[:])
			if err != nil {
				err = msgp.WrapError(err, "RecryptorSalt")
				return
			}
		case "s":
			err = dc.ReadExactBytes((z.Secret)[:])
			if err != nil {
				err = msgp.WrapError(err, "Secret")
				return
			}
		case "a":
			z.RemoteAddr, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RemoteAddr")
				return
			}
		case "v":
			err = dc.ReadExactBytes((z.ViewerAccount)[:])
			if err != nil {
				err = msgp.WrapError(err, "ViewerAccount")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DecryptTaskToken) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "e"
	err = en.Append(0x86, 0xa1, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ExpireTime)
	if err != nil {
		err = msgp.WrapError(err, "ExpireTime")
		return
	}
	// write "f"
	err = en.Append(0xa1, 0x66)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.FileId)[:])
	if err != nil {
		err = msgp.WrapError(err, "FileId")
		return
	}
	// write "r"
	err = en.Append(0xa1, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.RecryptorSalt)[:])
	if err != nil {
		err = msgp.WrapError(err, "RecryptorSalt")
		return
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Secret)[:])
	if err != nil {
		err = msgp.WrapError(err, "Secret")
		return
	}
	// write "a"
	err = en.Append(0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteString(z.RemoteAddr)
	if err != nil {
		err = msgp.WrapError(err, "RemoteAddr")
		return
	}
	// write "v"
	err = en.Append(0xa1, 0x76)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.ViewerAccount)[:])
	if err != nil {
		err = msgp.WrapError(err, "ViewerAccount")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DecryptTaskToken) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "e"
	o = append(o, 0x86, 0xa1, 0x65)
	o = msgp.AppendInt64(o, z.ExpireTime)
	// string "f"
	o = append(o, 0xa1, 0x66)
	o = msgp.AppendBytes(o, (z.FileId)[:])
	// string "r"
	o = append(o, 0xa1, 0x72)
	o = msgp.AppendBytes(o, (z.RecryptorSalt)[:])
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendBytes(o, (z.Secret)[:])
	// string "a"
	o = append(o, 0xa1, 0x61)
	o = msgp.AppendString(o, z.RemoteAddr)
	// string "v"
	o = append(o, 0xa1, 0x76)
	o = msgp.AppendBytes(o, (z.ViewerAccount)[:])
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DecryptTaskToken) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "e":
			z.ExpireTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExpireTime")
				return
			}
		case "f":
			bts, err = msgp.ReadExactBytes(bts, (z.FileId)[:])
			if err != nil {
				err = msgp.WrapError(err, "FileId")
				return
			}
		case "r":
			bts, err = msgp.ReadExactBytes(bts, (z.RecryptorSalt)[:])
			if err != nil {
				err = msgp.WrapError(err, "RecryptorSalt")
				return
			}
		case "s":
			bts, err = msgp.ReadExactBytes(bts, (z.Secret)[:])
			if err != nil {
				err = msgp.WrapError(err, "Secret")
				return
			}
		case "a":
			z.RemoteAddr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RemoteAddr")
				return
			}
		case "v":
			bts, err = msgp.ReadExactBytes(bts, (z.ViewerAccount)[:])
			if err != nil {
				err = msgp.WrapError(err, "ViewerAccount")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DecryptTaskToken) Msgsize() (s int) {
	s = 1 + 2 + msgp.Int64Size + 2 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 2 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 2 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 2 + msgp.StringPrefixSize + len(z.RemoteAddr) + 2 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EncryptTaskToken) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "e":
			z.ExpireTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ExpireTime")
				return
			}
		case "f":
			err = dc.ReadExactBytes((z.FileId)[:])
			if err != nil {
				err = msgp.WrapError(err, "FileId")
				return
			}
		case "r":
			err = dc.ReadExactBytes((z.RecryptorSalt)[:])
			if err != nil {
				err = msgp.WrapError(err, "RecryptorSalt")
				return
			}
		case "s":
			err = dc.ReadExactBytes((z.Secret)[:])
			if err != nil {
				err = msgp.WrapError(err, "Secret")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EncryptTaskToken) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "e"
	err = en.Append(0x84, 0xa1, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ExpireTime)
	if err != nil {
		err = msgp.WrapError(err, "ExpireTime")
		return
	}
	// write "f"
	err = en.Append(0xa1, 0x66)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.FileId)[:])
	if err != nil {
		err = msgp.WrapError(err, "FileId")
		return
	}
	// write "r"
	err = en.Append(0xa1, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.RecryptorSalt)[:])
	if err != nil {
		err = msgp.WrapError(err, "RecryptorSalt")
		return
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Secret)[:])
	if err != nil {
		err = msgp.WrapError(err, "Secret")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EncryptTaskToken) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "e"
	o = append(o, 0x84, 0xa1, 0x65)
	o = msgp.AppendInt64(o, z.ExpireTime)
	// string "f"
	o = append(o, 0xa1, 0x66)
	o = msgp.AppendBytes(o, (z.FileId)[:])
	// string "r"
	o = append(o, 0xa1, 0x72)
	o = msgp.AppendBytes(o, (z.RecryptorSalt)[:])
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendBytes(o, (z.Secret)[:])
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EncryptTaskToken) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "e":
			z.ExpireTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExpireTime")
				return
			}
		case "f":
			bts, err = msgp.ReadExactBytes(bts, (z.FileId)[:])
			if err != nil {
				err = msgp.WrapError(err, "FileId")
				return
			}
		case "r":
			bts, err = msgp.ReadExactBytes(bts, (z.RecryptorSalt)[:])
			if err != nil {
				err = msgp.WrapError(err, "RecryptorSalt")
				return
			}
		case "s":
			bts, err = msgp.ReadExactBytes(bts, (z.Secret)[:])
			if err != nil {
				err = msgp.WrapError(err, "Secret")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EncryptTaskToken) Msgsize() (s int) {
	s = 1 + 2 + msgp.Int64Size + 2 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 2 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 2 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize))
	return
}
