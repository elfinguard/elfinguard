// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: chunk_getter.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DecryptTaskToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpireTime    int64  `protobuf:"varint,1,opt,name=expireTime,proto3" json:"expireTime,omitempty"`
	FileId        []byte `protobuf:"bytes,2,opt,name=fileId,proto3" json:"fileId,omitempty"`
	RecryptorSalt []byte `protobuf:"bytes,3,opt,name=recryptorSalt,proto3" json:"recryptorSalt,omitempty"`
	Secret        []byte `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
	RemoteAddr    string `protobuf:"bytes,5,opt,name=remoteAddr,proto3" json:"remoteAddr,omitempty"`
	ViewerAccount []byte `protobuf:"bytes,6,opt,name=viewerAccount,proto3" json:"viewerAccount,omitempty"`
	Contract      []byte `protobuf:"bytes,7,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (x *DecryptTaskToken) Reset() {
	*x = DecryptTaskToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chunk_getter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptTaskToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptTaskToken) ProtoMessage() {}

func (x *DecryptTaskToken) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_getter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptTaskToken.ProtoReflect.Descriptor instead.
func (*DecryptTaskToken) Descriptor() ([]byte, []int) {
	return file_chunk_getter_proto_rawDescGZIP(), []int{0}
}

func (x *DecryptTaskToken) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *DecryptTaskToken) GetFileId() []byte {
	if x != nil {
		return x.FileId
	}
	return nil
}

func (x *DecryptTaskToken) GetRecryptorSalt() []byte {
	if x != nil {
		return x.RecryptorSalt
	}
	return nil
}

func (x *DecryptTaskToken) GetSecret() []byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *DecryptTaskToken) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *DecryptTaskToken) GetViewerAccount() []byte {
	if x != nil {
		return x.ViewerAccount
	}
	return nil
}

func (x *DecryptTaskToken) GetContract() []byte {
	if x != nil {
		return x.Contract
	}
	return nil
}

type GetChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *DecryptTaskToken `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Path  string            `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Index int64             `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *GetChunkRequest) Reset() {
	*x = GetChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chunk_getter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkRequest) ProtoMessage() {}

func (x *GetChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_getter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkRequest.ProtoReflect.Descriptor instead.
func (*GetChunkRequest) Descriptor() ([]byte, []int) {
	return file_chunk_getter_proto_rawDescGZIP(), []int{1}
}

func (x *GetChunkRequest) GetToken() *DecryptTaskToken {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *GetChunkRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetChunkRequest) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type GetChunkReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrStr     string `protobuf:"bytes,1,opt,name=errStr,proto3" json:"errStr,omitempty"`
	Chunk      []byte `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
	TotalBytes int64  `protobuf:"varint,3,opt,name=totalBytes,proto3" json:"totalBytes,omitempty"`
}

func (x *GetChunkReply) Reset() {
	*x = GetChunkReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chunk_getter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChunkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkReply) ProtoMessage() {}

func (x *GetChunkReply) ProtoReflect() protoreflect.Message {
	mi := &file_chunk_getter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkReply.ProtoReflect.Descriptor instead.
func (*GetChunkReply) Descriptor() ([]byte, []int) {
	return file_chunk_getter_proto_rawDescGZIP(), []int{2}
}

func (x *GetChunkReply) GetErrStr() string {
	if x != nil {
		return x.ErrStr
	}
	return ""
}

func (x *GetChunkReply) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *GetChunkReply) GetTotalBytes() int64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

var File_chunk_getter_proto protoreflect.FileDescriptor

var file_chunk_getter_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x72, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x22,
	0xea, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x61,
	0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x6e, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x5d, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x53, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x32, 0x51, 0x0a, 0x0b, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1a, 0x2e, 0x72, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x33,
	0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x66,
	0x69, 0x6e, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x65, 0x6c, 0x66, 0x69, 0x6e, 0x68, 0x6f, 0x73, 0x74,
	0x2d, 0x6c, 0x61, 0x62, 0x2f, 0x72, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chunk_getter_proto_rawDescOnce sync.Once
	file_chunk_getter_proto_rawDescData = file_chunk_getter_proto_rawDesc
)

func file_chunk_getter_proto_rawDescGZIP() []byte {
	file_chunk_getter_proto_rawDescOnce.Do(func() {
		file_chunk_getter_proto_rawDescData = protoimpl.X.CompressGZIP(file_chunk_getter_proto_rawDescData)
	})
	return file_chunk_getter_proto_rawDescData
}

var file_chunk_getter_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_chunk_getter_proto_goTypes = []interface{}{
	(*DecryptTaskToken)(nil), // 0: recryptor.DecryptTaskToken
	(*GetChunkRequest)(nil),  // 1: recryptor.GetChunkRequest
	(*GetChunkReply)(nil),    // 2: recryptor.GetChunkReply
}
var file_chunk_getter_proto_depIdxs = []int32{
	0, // 0: recryptor.GetChunkRequest.token:type_name -> recryptor.DecryptTaskToken
	1, // 1: recryptor.ChunkGetter.GetChunk:input_type -> recryptor.GetChunkRequest
	2, // 2: recryptor.ChunkGetter.GetChunk:output_type -> recryptor.GetChunkReply
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_chunk_getter_proto_init() }
func file_chunk_getter_proto_init() {
	if File_chunk_getter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chunk_getter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptTaskToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chunk_getter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chunk_getter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChunkReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chunk_getter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chunk_getter_proto_goTypes,
		DependencyIndexes: file_chunk_getter_proto_depIdxs,
		MessageInfos:      file_chunk_getter_proto_msgTypes,
	}.Build()
	File_chunk_getter_proto = out.File
	file_chunk_getter_proto_rawDesc = nil
	file_chunk_getter_proto_goTypes = nil
	file_chunk_getter_proto_depIdxs = nil
}
